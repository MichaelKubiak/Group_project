shiny::runApp()
load("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/combined_data_clust_workspace.RData")
plot(clust)
plot(clust$BIC)
library(mclust)
plot(clust$BIC)
rm (arguments, counts, dim.red.dist,direct.dist)
rm(direct.dist.mat, dl, models,p.self.fail,parser,prior,cell.names,cores,k,n.simulations,nongene,valid.cells,simulate)
save.image("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/clust_workspace.RData")
plot(clust)
plot(clust$z)
boxplot(clust$z)
load("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/combined_data_clust_workspace.RData")
rm (list=setdiff(ls(),c("clust",dim.red.dist)))
load("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/combined_data_clust_workspace.RData")
rm (list=setdiff(ls(),c("clust","dim.red.dist")))
library(plotly)
plotly(dim.red.dist)
plot(dim.red.dist)
plot_ly(dim.red.dist)
plot_ly(as.data.frame(dim.red.dist))
plot_ly(as.data.frame(dim.red.dist))
f<-as.data.frame(dim.red.dist)
plot_ly(as.data.frame(dim.red.dist),x=V1,y=V2,z=V3)
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3)
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3,marker=(size=1))
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3,marker=c(size=1))
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3,marker=list(size=1))
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3,marker=list(color=clust$classification,size=1))
clust$classification
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
cols<-c()
cols<-list_colours(input,clust)
#Function that creates the list 'cols' depending on the k value used for clustering
#The 'ui.R' file will assign a colour to each cluster number
list_colours<-function(input,clust){
for (type in clust$classification){
for (n in 1:input$clusts){
if (type %in% n){
cols<-append(cols, input[[paste0("Cluster_", type)]])
}
}
}
return (cols)
}
fluidPage(
titlePanel("tSNE plot for variable cluster numbers using the author generated gene counting matrix"),
sidebarLayout(
#The sidebar will change the number of colour options based on the number of K assigned to the graph
sidebarPanel(
colourInput("Cluster_1",   "Cluster_1",   value="#000080"),
colourInput("Cluster_2",   "Cluster_2",   value="#FF0000"),
colourInput("Cluster_3",   "Cluster_3",   value="#FFA500"),
colourInput("Cluster_4",   "Cluster_4",   value="#008000"),
colourInput("Cluster_5",   "Cluster_5",   value="#964B00"),
colourInput("Cluster_6", "Cluster_6", value="#9966CC"),
colourInput("Cluster_7", "Cluster_7", value="#00FFFF"),
colourInput("Cluster_8", "Cluster_8", value="#FD6C9E")
),
mainPanel(
#Display the graph made in the 'server.R' file
plotlyOutput("plot1")
)
)
)
input$clusts<-c("blue","green","yellow","orange","red","pink","grey","black")
input<-NULL
input$clusts<-c("blue","green","yellow","orange","red","pink","grey","black")
#Function that creates the list 'cols' depending on the k value used for clustering
#The 'ui.R' file will assign a colour to each cluster number
list_colours<-function(input,clust){
for (type in clust$classification){
for (n in 1:input$clusts){
if (type %in% n){
cols<-append(cols, input[[paste0("Cluster_", type)]])
}
}
}
return (cols)
}
cols<-list_colours(input,clust)
for (type in clust$classification){
for (n in 1:input$clusts){
if (type %in% n){
cols<-append(cols, input[[paste0("Cluster_", type)]])
}
}
}
input$clusts<-8
for (type in clust$classification){
for (n in 1:input$clusts){
if (type %in% n){
cols<-append(cols, "black")#input[[paste0("Cluster_", type)]])
}
}
}
plot_ly(as.data.frame(dim.red.dist),x=~V1,y=~V2,z=~V3,marker=list(color=col,size=1))
rm (list=setdiff(ls(),c("clust","dim.red.dist")))
save.image("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/clust_workspace.RData")
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
#Load the data within the 'RData' file, required to make the graphs
load("./clust_workspace.RData")
fluidPage(
titlePanel("tSNE plot for variable cluster numbers using the author generated gene counting matrix"),
sidebarLayout(
#The sidebar will change the number of colour options based on the number of K assigned to the graph
sidebarPanel(
colourInput("Cluster_1",   "Cluster_1",   value="#000080"),
colourInput("Cluster_2",   "Cluster_2",   value="#FF0000"),
colourInput("Cluster_3",   "Cluster_3",   value="#FFA500"),
colourInput("Cluster_4",   "Cluster_4",   value="#008000"),
colourInput("Cluster_5",   "Cluster_5",   value="#964B00"),
colourInput("Cluster_6", "Cluster_6", value="#9966CC"),
colourInput("Cluster_7", "Cluster_7", value="#00FFFF"),
colourInput("Cluster_8", "Cluster_8", value="#FD6C9E")
),
mainPanel(
#Display the graph made in the 'server.R' file
plotlyOutput("plot1")
)
)
)
fluidPage(
titlePanel("tSNE plot for variable cluster numbers using the author generated gene counting matrix"),
sidebarLayout(
#The sidebar will change the number of colour options based on the number of K assigned to the graph
sidebarPanel(
colourInput("Cluster_1",   "Cluster_1",   value="#000080"),
colourInput("Cluster_2",   "Cluster_2",   value="#FF0000"),
colourInput("Cluster_3",   "Cluster_3",   value="#FFA500"),
colourInput("Cluster_4",   "Cluster_4",   value="#008000"),
colourInput("Cluster_5",   "Cluster_5",   value="#964B00"),
colourInput("Cluster_6", "Cluster_6", value="#9966CC"),
colourInput("Cluster_7", "Cluster_7", value="#00FFFF"),
colourInput("Cluster_8", "Cluster_8", value="#FD6C9E")
),
mainPanel(
#Display the graph made in the 'server.R' file
plotlyOutput("plot1")
)
)
)
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
load("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/clust_workspace.RData")
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
run<-as.data.frame(read.delim("./SraRunTable_all.txt", sep="\t", header = TRUE)[,c("Sample_Name","cell_type")])
run<-as.data.frame(read.delim("../SraRunTable_all.txt", sep="\t", header = TRUE)[,c("Sample_Name","cell_type")])
run<-as.data.frame(read.delim("../../Clustering/SraRunTable_all.txt", sep="\t", header = TRUE)[,c("Sample_Name","cell_type")])
load("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/clust_workspace.RData")
save.image("~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering/clust_workspace.RData")
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
runApp('~/Course_Material/BS7120/Group_project/Group_project/Website/R/Pipeline1_Author/Clustering')
count_matrix <- read.delim("~/Course_Material/BS7120/Group_project/Group_project/2_Alternative_pipeline/count_matrix", row.names=1)
View(count_matrix)
